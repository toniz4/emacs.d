* My Emacs configuration
It's pretty basic.
** Remove Anoying things
#+begin_src emacs-lisp
  ;; Startup file
  (setq inhibit-startup-message t)
  ;; Menus
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  ;; Cursor
  (blink-cursor-mode 0)
  ;; Change backup dir
  (setq backup-directory-alist '(("." . "~/.cache/emacs")))
  ;; alisas to yes or no
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
** Looks
*** Fonts
- Pragmata pro could be a nice font, if i get tired of bitmap fonts.
#+begin_src emacs-lisp
  ;; Maybe one of those it's the right way to use a font
  (set-frame-font "lfont:pixelsize=12" nil t)
  (add-to-list 'default-frame-alist '(font . "lfont:pixelsize=12"))
  (set-face-attribute 'default nil :family "lfont:pixelsize=12")
  (global-prettify-symbols-mode 1)
#+end_src
*** Modeline
TODO: Customize modeline
*** Misc
#+begin_src emacs-lisp
  ;; Relative line numbers
  (global-display-line-numbers-mode)
  (setq display-line-numbers-type 'relative)
  ;; Tabsize
  (setq-default tab-width 4)
#+end_src
** General configs
*** Scroll
- Don't center cursor when reaching bottom of the screen
#+begin_src emacs-lisp
  (setq scroll-conservatively 100)
#+end_src
*** Org-mode 
- Initialize org-indent-mode in org-mode, and activate org-tempo for abreviations
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook (lambda ()
                             (org-indent-mode)
                             (require 'org-tempo)
                             (setq tempo-interactive t)))
#+end_src
*** ido-mode
#+begin_src emacs-lisp
  (ido-mode 1)
  (setq ido-everywhere t)
  (setq ido-enable-flex-matching t)
#+end_src
*** Buffers
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "C-x b") 'ido-switch-buffer)
#+end_src
** Packages
*** ace-window
#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :bind (("C-x o" . ace-window)))
#+end_src
*** acme-theme
#+begin_src emacs-lisp
  (use-package acme-theme
    :ensure t
    :config (load-theme 'acme t))
#+end_src
*** auto-complete
#+begin_src emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode -1)))
#+end_src
*** beacon
#+begin_src emacs-lisp
  (use-package beacon
    :ensure t
    :config (beacon-mode 1))
#+end_src
*** flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
#+end_src
*** flycheck haskell
#+begin_src emacs-lisp
  (use-package flycheck-haskell
    :ensure t
    :config(add-hook 'haskell-mode-hook #'flycheck-haskell-setup))
#+end_src
*** haskell-mode
#+begin_src emacs-lisp
  (use-package haskell-mode
    :ensure t
    :config
    (progn 
      (add-hook 'haskell-mode-hook (lambda ()
                                     (haskell-indent-mode)
                                     (haskell-indentation-mode)
                                     (interactive-haskell-mode)
                                     (setq haskell-interactive-popup-errors nil)))))
#+end_src

  (use-package ivy
    :ensure t
    :config
    (progn
      (ivy-mode -1)
      (setq ivy-use-virtual-buffers t)
      (setq enable-r
*** ido-vertical-mode
#+begin_src emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (progn
      (require 'ido-vertical-mode)
      (ido-vertical-mode 1)
      (setq ido-vertical-define-keys 'C-n-and-C-p-only)))
#+end_src
*** rainbow-mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t)
#+end_src
*** smex
#+begin_src emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind ("M-x" . smex))
#+end_src
*** swiper
#+begin_src emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . 'swiper))
#+end_src
*** Wich-key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))
#+end_src

